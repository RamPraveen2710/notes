import pandas as pd
import numpy as np
from itertools import combinations

# Role weights
role_weights = {
    'CEO': 15,
    'CFO': 15,
    'COO': 15,
    'MD': 8,
    'BofD': 8,
    'BofM': 8,
    'VP': 5,
    'Sales Analyst': 2,
    'Coordinator': 2,
    'Researcher': 2
}

# Function to load the Excel file
def load_excel(file_path):
    """Load the Excel file into a pandas DataFrame."""
    return pd.read_excel(file_path)

# Function to preprocess the data
def preprocess_data(data):
    """Preprocess the data to clean and format it."""
    # Convert time columns to datetime
    data['START_TIME'] = pd.to_datetime(data['START_TIME'])
    data['END_TIME'] = pd.to_datetime(data['END_TIME'])

    # Fill missing participant IDs with email if available
    data['FIRMWIDE_ID'] = data['FIRMWIDE_ID'].fillna(data['EMAIL'])
    
    # Replace missing functional roles or titles with a default value
    data['FUNCTIONAL_ROLE'] = data['FUNCTIONAL_ROLE'].fillna(data['TITLE'])
    data['FUNCTIONAL_ROLE'] = data['FUNCTIONAL_ROLE'].fillna('Default Role')
    
    return data

# Function to aggregate participants for each interaction
def aggregate_interactions(data):
    """Aggregate rows corresponding to the same ID into a single interaction."""
    def aggregate_func(group):
        return pd.Series({
            'START_TIME': group['START_TIME'].iloc[0],
            'END_TIME': group['END_TIME'].iloc[0],
            'SUBJECT': group['SUBJECT'].iloc[0],
            'TAGS': list(set(tag for tags in group['TAGS'].dropna() for tag in tags.split(','))),
            'PARTICIPANTS': group[['FIRMWIDE_ID', 'IS_EMPLOYEE', 'FUNCTIONAL_ROLE']].to_dict('records'),
        })
    
    return data.groupby('ID').apply(aggregate_func).reset_index()

# Function to calculate time difference
def calculate_time_difference(start1, start2):
    """Calculate the time difference in minutes."""
    return abs((start1 - start2).total_seconds() / 60)

# Function to calculate duration match percentage
def calculate_duration_match(start1, end1, start2, end2):
    """Calculate the percentage of duration match."""
    duration1 = (end1 - start1).total_seconds() / 60
    duration2 = (end2 - start2).total_seconds() / 60
    return min(duration1, duration2) / max(duration1, duration2) * 100

# Function to calculate overlap percentage
def calculate_overlap_percentage(start1, end1, start2, end2):
    """Calculate the percentage of overlap."""
    overlap_start = max(start1, start2)
    overlap_end = min(end1, end2)
    overlap_duration = max(0, (overlap_end - overlap_start).total_seconds() / 60)
    duration1 = (end1 - start1).total_seconds() / 60
    return overlap_duration / duration1 * 100 if duration1 > 0 else 0

# Function to calculate participant matching
def calculate_participant_matching(participants1, participants2):
    """Calculate the percentage of matching participants."""
    set1 = set(participant['FIRMWIDE_ID'] for participant in participants1 if participant['FIRMWIDE_ID'])
    set2 = set(participant['FIRMWIDE_ID'] for participant in participants2 if participant['FIRMWIDE_ID'])
    if not set1:
        return 0
    return len(set1 & set2) / len(set1) * 100

# Functions for role matching
def calculate_internal_external_role_points(participants):
    """Calculate total role points for internal and external participants."""
    internal_points = sum(role_weights.get(participant['FUNCTIONAL_ROLE'], 1) for participant in participants if participant['IS_EMPLOYEE'])
    external_points = sum(role_weights.get(participant['FUNCTIONAL_ROLE'], 1) for participant in participants if not participant['IS_EMPLOYEE'])
    return internal_points, external_points

def calculate_internal_external_role_matching(old_participants, new_participants):
    """Calculate matching role points for internal and external participants."""
    internal_matching_points = 0
    external_matching_points = 0

    for old_participant in old_participants:
        for new_participant in new_participants:
            if (
                old_participant['FUNCTIONAL_ROLE'] == new_participant['FUNCTIONAL_ROLE'] and
                old_participant['FIRMWIDE_ID'] == new_participant['FIRMWIDE_ID']
            ):
                if old_participant['IS_EMPLOYEE'] and new_participant['IS_EMPLOYEE']:
                    internal_matching_points += role_weights.get(old_participant['FUNCTIONAL_ROLE'], 1)
                elif not old_participant['IS_EMPLOYEE'] and not new_participant['IS_EMPLOYEE']:
                    external_matching_points += role_weights.get(old_participant['FUNCTIONAL_ROLE'], 1)
    return internal_matching_points, external_matching_points

def calculate_role_matching_percentages(old_participants, new_participants):
    """Calculate internal and external role matching percentages."""
    internal_total, external_total = calculate_internal_external_role_points(new_participants)
    internal_matching, external_matching = calculate_internal_external_role_matching(old_participants, new_participants)
    
    internal_percentage = (internal_matching / internal_total * 100) if internal_total > 0 else 0
    external_percentage = (external_matching / external_total * 100) if external_total > 0 else 0
    
    return external_percentage, internal_percentage

# Function to extract pairwise features
def extract_pairwise_features(aggregated_data, attribute_value):
    """Extract pairwise features for all interactions within the same ATTRIBUTE_VALUE."""
    features = []
    group = aggregated_data[aggregated_data['ATTRIBUTE_VALUE'] == attribute_value]
    
    for pair in combinations(group.to_dict('records'), 2):
        int1, int2 = pair
        
        time_diff = calculate_time_difference(int1['START_TIME'], int2['START_TIME'])
        duration_match = calculate_duration_match(int1['START_TIME'], int1['END_TIME'], int2['START_TIME'], int2['END_TIME'])
        overlap_percentage = calculate_overlap_percentage(int1['START_TIME'], int1['END_TIME'], int2['START_TIME'], int2['END_TIME'])
        internal_match = calculate_participant_matching(int1['PARTICIPANTS'], int2['PARTICIPANTS'])
        external_match = calculate_participant_matching(int1['PARTICIPANTS'], int2['PARTICIPANTS'])
        subject_match = calculate_subject_matching(int1['SUBJECT'], int2['SUBJECT'])
        tag_match = calculate_tag_matching(int1['TAGS'], int2['TAGS'])
        ext_role_match, int_role_match = calculate_role_matching_percentages(int1['PARTICIPANTS'], int2['PARTICIPANTS'])
        
        features.append({
            'Duration Match': duration_match,
            'Overlap Percentage': overlap_percentage,
            'Internal Matching': internal_match,
            'External Matching': external_match,
            'Subject Matching': subject_match,
            'Tag Matching': tag_match,
            'External Role Matching': ext_role_match,
            'Internal Role Matching': int_role_match
        })
    
    return pd.DataFrame(features)

# Main function to process and extract features from Excel
def main(file_path, attribute_value):
    data = load_excel(file_path)
    data = preprocess_data(data)
    aggregated_data = aggregate_interactions(data)
    pairwise_features = extract_pairwise_features(aggregated_data, attribute_value)
    return pairwise_features

# Example Usage
file_path = 'your_excel_file.xlsx'  # Replace with your Excel file path
attribute_value = 'your_attribute_value'  # Replace with a specific ATTRIBUTE_VALUE
features = main(file_path, attribute_value)
print(features)















def calculate_role_matching_features(
    old_participants, old_roles, old_is_employee,
    new_participants, new_roles, new_is_employee,
    internal_role_weights, external_role_weights,
    role_threshold=8, matching_threshold=4
):
    """
    Calculate role matching percentages for internal and external participants with added threshold logic.

    Parameters:
    - old_participants: List of participants (firmwide IDs) in the old interaction.
    - old_roles: List of roles in the old interaction.
    - old_is_employee: List of bools indicating internal participants in the old interaction.
    - new_participants: List of participants (firmwide IDs) in the new interaction.
    - new_roles: List of roles in the new interaction.
    - new_is_employee: List of bools indicating internal participants in the new interaction.
    - internal_role_weights: Dictionary of role weights for internal participants.
    - external_role_weights: Dictionary of role weights for external participants.
    - role_threshold: Weight threshold to exclude unmatched participants from the union.
    - matching_threshold: Minimum weight of matching roles required to calculate the percentage.

    Returns:
    - internal_role_match_percentage, external_role_match_percentage
    """

    def prepare_data(participants, roles, is_employee, is_internal, role_weights):
        """Prepare combined (firmwide_id, role, weight) data for internal/external participants."""
        return [
            (fw_id, role, role_weights.get(role, 2))
            for fw_id, role, emp in zip(participants, roles, is_employee)
            if emp == is_internal
        ]

    def calculate_matching_points(old_data, new_data, threshold, matching_threshold):
        """
        Calculate the role matching percentage.
        - Numerator: Matching role weights.
        - Denominator: Total union role weights, excluding non-matching participants
          from the new interaction if their role weight > threshold.
        - If no matching participant exceeds `matching_threshold`, return 100%.
        """
        old_fw_roles = set((fw_id, role) for fw_id, role, _ in old_data)
        new_fw_roles = set((fw_id, role) for fw_id, role, _ in new_data)

        # Calculate matching role weights
        matching_points = sum(
            weight for fw_id, role, weight in old_data if (fw_id, role) in new_fw_roles
        )

        # Check if any matching role exceeds the matching threshold
        if not any(
            weight > matching_threshold
            for fw_id, role, weight in old_data
            if (fw_id, role) in new_fw_roles
        ):
            return 0, 1  # Assign a special value to mark this as 100%

        # Calculate union role weights
        union_points = sum(weight for fw_id, role, weight in old_data)  # Total weight from old interaction
        union_points += sum(
            weight for fw_id, role, weight in new_data
            if (fw_id, role) not in old_fw_roles and weight <= threshold
        )

        return matching_points, union_points

    # Prepare data for internal participants
    old_internal_data = prepare_data(old_participants, old_roles, old_is_employee, True, internal_role_weights)
    new_internal_data = prepare_data(new_participants, new_roles, new_is_employee, True, internal_role_weights)

    # Prepare data for external participants
    old_external_data = prepare_data(old_participants, old_roles, old_is_employee, False, external_role_weights)
    new_external_data = prepare_data(new_participants, new_roles, new_is_employee, False, external_role_weights)

    # Internal Role Matching
    internal_matching_points, internal_union_points = calculate_matching_points(
        old_internal_data, new_internal_data, role_threshold, matching_threshold
    )
    internal_role_match_percentage = (
        100 if internal_union_points == 1 else
        (internal_matching_points / internal_union_points) * 100 if internal_union_points > 0 else 0
    )

    # External Role Matching
    external_matching_points, external_union_points = calculate_matching_points(
        old_external_data, new_external_data, role_threshold, matching_threshold
    )
    external_role_match_percentage = (
        100 if external_union_points == 1 else
        (external_matching_points / external_union_points) * 100 if external_union_points > 0 else 0
    )

    return internal_role_match_percentage, external_role_match_percentage
