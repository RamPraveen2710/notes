# Function to extract pairwise features with bidirectional comparisons
def extract_pairwise_features(aggregated_data, attribute_value):
    """Extract pairwise features for all interactions within the same ATTRIBUTE_VALUE."""
    features = []

    # Filter interactions with the specified ATTRIBUTE_VALUE
    group = aggregated_data[aggregated_data['ATTRIBUTE_VALUE'] == attribute_value]

    if group.empty:
        raise ValueError(f"No interactions found for ATTRIBUTE_VALUE: {attribute_value}")

    # Generate all pairwise combinations including bidirectional
    indices = group.index.tolist()
    pair_indices = [(i, j) for i in indices for j in indices if i != j]

    for idx1, idx2 in pair_indices:
        interaction1 = group.loc[idx1]
        interaction2 = group.loc[idx2]

        # Compare the interactions
        features.append(compare_interactions(interaction1, interaction2))

    return pd.DataFrame(features)

# Function to compare two interactions
def compare_interactions(interaction1, interaction2):
    """Compute feature comparisons between two interactions."""
    time_diff = abs((interaction1['START_TIME'] - interaction2['START_TIME']).total_seconds() / 60)  # Time difference in minutes
    overlap = calculate_overlap(interaction1['START_TIME'], interaction1['END_TIME'],
                                 interaction2['START_TIME'], interaction2['END_TIME'])

    features = {
        'Interaction1_ID': interaction1['ID'],
        'Interaction2_ID': interaction2['ID'],
        'Time Difference': time_diff,
        'Overlap Percentage': overlap,
    }
    return features
