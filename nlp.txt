# Combine relevant fields into a single text representation
df["text"] = df["subject"] + " " + df["participants"] + " " + df["tags"]

# Print the first few rows
print(df[["id", "text"]])


from sentence_transformers import SentenceTransformer

# Load pre-trained sentence transformer model
model = SentenceTransformer("all-MiniLM-L6-v2")

# Convert interaction texts into vector embeddings
embeddings = model.encode(df["text"].tolist(), convert_to_tensor=True)

# Print the shape of generated embeddings
print("Embedding Shape:", embeddings.shape)  # (num_interactions, 384)



from sklearn.metrics.pairwise import cosine_similarity
import torch

def search_interactions(query, df, embeddings, model, top_k=3):
    # Convert user query into an embedding
    query_embedding = model.encode([query], convert_to_tensor=True)

    # Compute cosine similarity between the query and all stored embeddings
    similarities = cosine_similarity(query_embedding.cpu(), embeddings.cpu())[0]

    # Get the indices of top-K most similar interactions
    top_indices = similarities.argsort()[-top_k:][::-1]

    # Retrieve the matching interactions
    results = df.iloc[top_indices].copy()
    results["score"] = similarities[top_indices]  # Add similarity score

    return results

# Example search
query = "Dinner with Google CEO"
search_results = search_interactions(query, df, embeddings, model)

# Print results
print(search_results[["id", "subject", "score"]])





from transformers import AutoModel, AutoTokenizer
import torch

# Load a different semantic search model (e.g., BERT, RoBERTa, DistilBERT)
model_name = "sentence-transformers/all-mpnet-base-v2"  # A strong alternative
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModel.from_pretrained(model_name)

def get_embedding(text):
    tokens = tokenizer(text, return_tensors="pt", padding=True, truncation=True)
    with torch.no_grad():
        output = model(**tokens)
    return output.last_hidden_state.mean(dim=1)  # Get sentence-level embedding

# Example usage
query_embedding = get_embedding("Meeting with Google CEO")
print(query_embedding.shape)  # Output shape: (1, 768)






pip install torch transformers scikit-learn faiss-cpu
import torch
from transformers import AutoTokenizer, AutoModel
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
# Load the tokenizer and model
model_name = "sentence-transformers/all-mpnet-base-v2"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModel.from_pretrained(model_name)

# Function to generate embeddings
def get_embedding(text):
    tokens = tokenizer(text, return_tensors="pt", padding=True, truncation=True, max_length=512)
    with torch.no_grad():
        output = model(**tokens)
    return output.last_hidden_state.mean(dim=1).squeeze().numpy()  # Mean pooling
# Convert all stored interactions into embeddings
embeddings = np.array([get_embedding(text) for text in df["text"]])

# Save embeddings for future use (avoid recomputing)
np.save("embeddings.npy", embeddings)
def search_interactions(query, df, embeddings, top_k=5):
    query_embedding = get_embedding(query).reshape(1, -1)  # Convert query to embedding
    similarities = cosine_similarity(query_embedding, embeddings)[0]  # Compute similarity scores
    top_indices = similarities.argsort()[-top_k:][::-1]  # Get top K matches

    # Retrieve matching interactions
    results = df.iloc[top_indices].copy()
    results["score"] = similarities[top_indices]  # Add similarity score

    return results
query = "Dinner with Google CEO"
search_results = search_interactions(query, df, embeddings)

# Print top matches
print(search_results[["id", "subject", "score"]])


