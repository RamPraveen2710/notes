import pandas as pd
import ast

# Load the processed interaction & readership data
interaction_file = "processed_interactions.csv"
readership_file = "processed_readership.csv"

interactions_df = pd.read_csv(interaction_file, dtype=str)
readership_df = pd.read_csv(readership_file, dtype=str)

# Convert lists stored as strings back to lists
list_columns = ["FirmwideIDs", "ParticipantNames", "EmployeeInd", "Roles", "RICs", "TickersDiscussed", "EMCM_Tickers"]
for col in list_columns:
    interactions_df[col] = interactions_df[col].apply(lambda x: ast.literal_eval(x) if pd.notna(x) and x.startswith("[") else [])

# ✅ Step 2.1: Identify External Readers Interested in the Searched Ticker
def get_interested_readers(ticker, readership_df):
    """Find unique FirmwideIDs from readership data for a given ticker."""
    filtered_readers = readership_df[readership_df["TickerRead"].str.contains(ticker, case=False, na=False)]
    return set(filtered_readers["FirmwideID"].unique())

# ✅ Step 2.2: Identify Interactions with the Searched Ticker
def get_ticker_matched_interactions(ticker, interactions_df):
    """
    Find interactions where:
    - An external participant is present
    - The TickerDiscussed, RIC, or EMCM_Ticker contains the searched ticker
    - Assign the highest score (100) to these interactions
    """
    matched_interactions = set()
    external_participants = set()
    interaction_scores = {}  # Store interaction scores

    for _, row in interactions_df.iterrows():
        if any(ticker.lower() in str(value).lower() for value in row["TickersDiscussed"] + row["RICs"] + row["EMCM_Tickers"]):
            # Ensure at least one external participant
            external_firmwide_ids = {fid for fid, emp in zip(row["FirmwideIDs"], row["EmployeeInd"]) if emp == "0"}
            if external_firmwide_ids:
                matched_interactions.add(row["InteractionID"])
                interaction_scores[row["InteractionID"]] = 100  # Assign highest score
                external_participants.update(external_firmwide_ids)

    return matched_interactions, external_participants, interaction_scores

# ✅ Step 2.3: Get Combined List of External Participants
def get_initial_participant_list(ticker, readership_df, interactions_df):
    """
    - Combine readership FirmwideIDs and FirmwideIDs from ticker-matched interactions.
    - Assign scores to interactions and return remaining interactions for next steps.
    """
    interested_readers = get_interested_readers(ticker, readership_df)
    matched_interactions, external_participants, interaction_scores = get_ticker_matched_interactions(ticker, interactions_df)

    # Combine both sets of external participants
    combined_external_participants = interested_readers.union(external_participants)

    # Create a DataFrame for Matched Interactions with Scores
    matched_df = interactions_df[interactions_df["InteractionID"].isin(matched_interactions)].copy()
    matched_df["Score"] = matched_df["InteractionID"].map(interaction_scores)

    # Exclude matched interactions from further processing
    remaining_interactions_df = interactions_df[~interactions_df["InteractionID"].isin(matched_interactions)].copy()

    return matched_df, combined_external_participants, remaining_interactions_df

# Run for a given ticker (Example: "NVDA")
searched_ticker = "NVDA"
matched_df, external_participants, remaining_interactions_df = get_initial_participant_list(searched_ticker, readership_df, interactions_df)

# ✅ Print Output
print(f"High-confidence interactions for ticker '{searched_ticker}':", matched_df.shape[0])
print(f"Identified external participants:", len(external_participants))
print(f"Remaining interactions after Step 2:", remaining_interactions_df.shape[0])
